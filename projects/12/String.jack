// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int len, maxLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let len = 0;
        let maxLen = maxLength;

        if (maxLength = 0) {
            let maxLength = 1;
        }

        let str = Array.new(maxLength);
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j < len) {
            return str[j];
        } else {
            return Sys.error(1);
        }
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (len < maxLen) {
            let str[len] = c;
            let len = len + 1;
            return this;
        } else {
            return Sys.error(1);
        }
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (len > 0) {
            let len = len - 1;
            let str[len] = 0;
        } else {
            do Sys.error(1);
        }

        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, val, sign;
        let i = 0;
        let val = 0;
        let sign = str[0];

        // Check for negative
        if (sign = 45) {
            let i = 1;
        }

        while ((i < len) & (str[i] > 47) & (str[i] < 58)) {
            let val = (val * 10) + str[i] - 48;
            let i = i + 1;
        }

        if (sign = 45) {
            let val = val * -1;
        }

        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int tmp, i, sign, prev;
        
        if (val < 0) {
            let tmp = -val;
            let i = 1;
            let sign = -1;
        } else {
            let tmp = val;
            let i = 0;
            let sign = 1;
        }

        // Calc size needed to store val
        while (tmp > 0) {
            let tmp = tmp / 10;
            let i = i + 1;
        }


        // Increase length of string if needed
        if (maxLen < tmp) {
            do str.dispose();
            let maxLen = i;
            let str = Array.new(maxLen);
        }

        if (val < 0) {
            let tmp = -val;
        } else {
            let tmp = val;
        }

        let prev = tmp;
        let len = 0;

        while (tmp > 0) {
            let tmp = tmp / 10;
            let str[i - len - 1] = prev - (tmp * 10) + 48;
            let prev = tmp;
            let len = len + 1;
        }

        if (sign = -1) {
            let str[0] = 45;
            let len = len + 1;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
