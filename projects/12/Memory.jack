// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static int length, next;
    static Array freeList, memory;

    /** Initializes the class. */
    function void init() {
        let length = 0;
        let next = 1;

        let freeList = 2048;
        let freeList[length] = 16384 - freeList;
        let freeList[next] = null;

        let memory = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array segment;
        let segment = freeList;

        while (~(segment = null)) {
            if (segment[length] > size + 2) {
                let segment[length] = segment[length] - (size + 1);
                let segment = segment + segment[length];
                let segment[length] = size + 1;
                let segment[next] = null;
                return segment + 1;

            }

            let segment = segment[next];
        }

        do Sys.error(1);
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array segment;
        let segment = o - 1;
        let segment[length] = o[-1];
        let segment[next] = freeList;
        let freeList = segment;
        return;
    }    
}
